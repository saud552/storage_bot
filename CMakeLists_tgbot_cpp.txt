cmake_minimum_required(VERSION 3.16)
project(TelegramStorageBot)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# إعدادات التحسين
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG")

# البحث عن المكتبات المطلوبة
find_package(PkgConfig REQUIRED)

# ========================================
# Telegram Bot API - tgbot-cpp
# ========================================

# البحث عن tgbot-cpp
find_package(PkgConfig REQUIRED)
pkg_check_modules(TGBOT REQUIRED tgbot-cpp)

# التحقق من وجود المكتبة
if(NOT TGBOT_FOUND)
    message(FATAL_ERROR "tgbot-cpp library not found. Please install it first.")
endif()

message(STATUS "Found tgbot-cpp:")
message(STATUS "  Version: ${TGBOT_VERSION}")
message(STATUS "  Libraries: ${TGBOT_LIBRARIES}")
message(STATUS "  Include dirs: ${TGBOT_INCLUDE_DIRS}")

# ========================================
# Crypto++
# ========================================

find_package(PkgConfig REQUIRED)
pkg_check_modules(CRYPTOPP REQUIRED libcrypto++)

if(NOT CRYPTOPP_FOUND)
    message(FATAL_ERROR "Crypto++ library not found. Please install it first.")
endif()

# ========================================
# ODBC
# ========================================

find_package(PkgConfig REQUIRED)
pkg_check_modules(NANODBC REQUIRED nanodbc)

if(NOT NANODBC_FOUND)
    message(FATAL_ERROR "nanodbc library not found. Please install it first.")
endif()

# ========================================
# Boost (اختياري)
# ========================================

find_package(Boost COMPONENTS system thread)
if(Boost_FOUND)
    message(STATUS "Boost found: ${Boost_VERSION}")
else()
    message(WARNING "Boost not found. Some features may not work.")
endif()

# ========================================
# إنشاء الملفات التنفيذية
# ========================================

# الملف التنفيذي الرئيسي
add_executable(storage_bot_synchronized storage_bot_synchronized.cpp)

# ملف التحقق من tgbot-cpp
add_executable(tgbot_verification tgbot_cpp_verification.cpp)

# ========================================
# ربط المكتبات
# ========================================

# ربط المكتبات للملف الرئيسي
target_link_libraries(storage_bot_synchronized
    ${TGBOT_LIBRARIES}
    ${CRYPTOPP_LIBRARIES}
    ${NANODBC_LIBRARIES}
    pthread
    ssl
    crypto
)

# ربط المكتبات لملف التحقق
target_link_libraries(tgbot_verification
    ${TGBOT_LIBRARIES}
    pthread
    ssl
    crypto
)

# إضافة Boost إذا كان متوفراً
if(Boost_FOUND)
    target_link_libraries(storage_bot_synchronized
        Boost::system
        Boost::thread
    )
endif()

# ========================================
# إضافة مسارات الرأس
# ========================================

target_include_directories(storage_bot_synchronized PRIVATE
    ${TGBOT_INCLUDE_DIRS}
    ${CRYPTOPP_INCLUDE_DIRS}
    ${NANODBC_INCLUDE_DIRS}
)

target_include_directories(tgbot_verification PRIVATE
    ${TGBOT_INCLUDE_DIRS}
)

# ========================================
# إضافة flags المترجم
# ========================================

target_compile_options(storage_bot_synchronized PRIVATE
    ${TGBOT_CFLAGS_OTHER}
    ${CRYPTOPP_CFLAGS_OTHER}
    ${NANODBC_CFLAGS_OTHER}
)

target_compile_options(tgbot_verification PRIVATE
    ${TGBOT_CFLAGS_OTHER}
)

# ========================================
# إعدادات خاصة بالنظام
# ========================================

# إعدادات خاصة بـ Linux
if(UNIX AND NOT APPLE)
    target_link_libraries(storage_bot_synchronized rt)
    target_link_libraries(tgbot_verification rt)
endif()

# إعدادات خاصة بـ Windows
if(WIN32)
    target_link_libraries(storage_bot_synchronized ws2_32)
    target_link_libraries(tgbot_verification ws2_32)
endif()

# ========================================
# الاختبارات
# ========================================

enable_testing()

# اختبار التحقق من tgbot-cpp
add_test(NAME TgbotCppVerification COMMAND tgbot_verification)

# اختبار النظام الأساسي
add_test(NAME BasicSystemTest COMMAND storage_bot_synchronized --test)

# ========================================
# إعدادات التثبيت
# ========================================

install(TARGETS storage_bot_synchronized tgbot_verification
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

# ========================================
# معلومات البناء
# ========================================

message(STATUS "")
message(STATUS "=== معلومات البناء ===")
message(STATUS "المشروع: ${PROJECT_NAME}")
message(STATUS "المترجم: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "معيار C++: ${CMAKE_CXX_STANDARD}")
message(STATUS "الملفات التنفيذية:")
message(STATUS "  - storage_bot_synchronized")
message(STATUS "  - tgbot_verification")
message(STATUS "")
message(STATUS "المكتبات المستخدمة:")
message(STATUS "  - tgbot-cpp: ${TGBOT_VERSION}")
message(STATUS "  - Crypto++: ${CRYPTOPP_VERSION}")
message(STATUS "  - nanodbc: ${NANODBC_VERSION}")
if(Boost_FOUND)
    message(STATUS "  - Boost: ${Boost_VERSION}")
endif()
message(STATUS "")